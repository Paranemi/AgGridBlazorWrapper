@using System.Text.Json
@inject IJSRuntime JS
@typeparam ValueType
@implements IDisposable

@ChildContent
<div id="myGrid" style="height: @Height; width:@Width;" class="ag-theme-alpine"></div>

@code {
    [Parameter]
    public List<ValueType> Data { get; set; }

    [Parameter]
    public string Height { get; set; }

    [Parameter]
    public string Width { get; set; }

    [Parameter]
    public bool Pageable { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public bool FullRowEdit { get; set; }

    [Parameter]
    public EventCallback<ValueType> OnEdit { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private DotNetObjectReference<AgGrid<ValueType>>? _objReference;

    protected override void OnInitialized()
    {
        _objReference = DotNetObjectReference.Create(this);

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        var json = JsonSerializer.Serialize(Data);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("initAgGridRowData", json, Pageable, PageSize, FullRowEdit, _objReference);
        }
    }

    [JSInvokable]
    public async Task Edited(string json)
    {
        var dataObject = JsonSerializer.Deserialize<ValueType>(json);
        await OnEdit.InvokeAsync(dataObject);
    }

    public void Dispose()
    {
        _objReference?.Dispose();
    }
}
